{"remainingRequest":"/home/elizabeths/weather-app/node_modules/babel-loader/lib/index.js!/home/elizabeths/weather-app/src/store/weather.js","dependencies":[{"path":"/home/elizabeths/weather-app/src/store/weather.js","mtime":1619111669576},{"path":"/home/elizabeths/weather-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/elizabeths/weather-app/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL2VsaXphYmV0aHMvd2VhdGhlci1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc3BsaWNlLmpzIjsKaW1wb3J0IHdlYXRoZXJUcmFuc2xhdGUgZnJvbSAnQC91dGlscy93ZWF0aGVyLnV0aWwnOwppbXBvcnQgeyBnZXRDZWxzaXVtLCBnZXRVcmwgfSBmcm9tICdAL3V0aWxzL3dlYXRoZXIudXRpbCc7CnZhciBkYXlzID0gWydEb21pZ28nLCAnU2VndW5kYS1mZWlyYScsICdUZXLDp2EtZmVpcmEnLCAnUXVhcnRhLWZlaXJhJywgJ1F1aW50YS1mZWlyYScsICdTZXh0YS1mZWlyYScsICdTw6FiYWRvJ107CmV4cG9ydCBkZWZhdWx0IHsKICBzdGF0ZTogewogICAgY3VycmVudERheTogdW5kZWZpbmVkLAogICAgZm9yZWNhc3RzOiB1bmRlZmluZWQKICB9LAogIG11dGF0aW9uczogewogICAgc2V0Q3VycmVudERheTogZnVuY3Rpb24gc2V0Q3VycmVudERheShzdGF0ZSwgZGF5KSB7CiAgICAgIHN0YXRlLmN1cnJlbnREYXkgPSBkYXk7CiAgICB9LAogICAgc2V0Rm9yZWNhc3RzOiBmdW5jdGlvbiBzZXRGb3JlY2FzdHMoc3RhdGUsIGZvcmVjYXN0cykgewogICAgICBzdGF0ZS5mb3JlY2FzdHMgPSBmb3JlY2FzdHM7CiAgICB9LAogICAgY2xlYXJDdXJyZW50RGF5OiBmdW5jdGlvbiBjbGVhckN1cnJlbnREYXkoc3RhdGUpIHsKICAgICAgc3RhdGUuY3VycmVudERheSA9IHZvaWQgMDsKICAgIH0sCiAgICBjbGVhckZvcmVjYXN0czogZnVuY3Rpb24gY2xlYXJGb3JlY2FzdHMoc3RhdGUpIHsKICAgICAgc3RhdGUuZm9yZWNhc3RzID0gdm9pZCAwOwogICAgfQogIH0sCiAgYWN0aW9uczogewogICAgZmV0Y2hDdXJyZW50RGF5OiBmdW5jdGlvbiBmZXRjaEN1cnJlbnREYXkoX3JlZiwgX3JlZjIpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgY29tbWl0LCBjaXR5LCBhcGlLZXksIHJlc3BvbnNlLCBkYXRhLCBkdCwgY3VycmVudERheTsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjb21taXQgPSBfcmVmLmNvbW1pdDsKICAgICAgICAgICAgICAgIGNpdHkgPSBfcmVmMi5jaXR5LCBhcGlLZXkgPSBfcmVmMi5hcGlLZXk7CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMjsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIGZldGNoKCJodHRwczovL29wZW53ZWF0aGVybWFwLm9yZy9kYXRhLzIuNS93ZWF0aGVyP3E9Ii5jb25jYXQoY2l0eSwgIiZhcHBpZD0iKS5jb25jYXQoYXBpS2V5KSk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA4OwogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgZGF0YSA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgICBkdCA9IG5ldyBEYXRlKGRhdGEuZHQgKiAxMDAwKTsKICAgICAgICAgICAgICAgIGN1cnJlbnREYXkgPSB7CiAgICAgICAgICAgICAgICAgIHNreTogd2VhdGhlclRyYW5zbGF0ZVtkYXRhLndlYXRoZXJbMF0ubWFpbl0udG9Mb3dlckNhc2UoKSwKICAgICAgICAgICAgICAgICAgc2t5VXJsOiBnZXRVcmwoZGF0YS53ZWF0aGVyWzBdLm1haW4sIGR0LmdldEhvdXJzKCkgPiA2ICYmIGR0LmdldEhvdXJzKCkgPCAyMCksCiAgICAgICAgICAgICAgICAgIHRlbXA6IE1hdGguY2VpbChkYXRhLm1haW4udGVtcCksCiAgICAgICAgICAgICAgICAgIGZ0ZW1wOiBNYXRoLmNlaWwoZGF0YS5tYWluLmZlZWxzX2xpa2UpLAogICAgICAgICAgICAgICAgICBwcmVzc3VyZTogZGF0YS5tYWluLnByZXNzdXJlLAogICAgICAgICAgICAgICAgICB3aW5kOiBkYXRhLndpbmQuc3BlZWQsCiAgICAgICAgICAgICAgICAgIHdlZWtEYXk6IGRheXNbZHQuZ2V0RGF5KCldLAogICAgICAgICAgICAgICAgICBjb29yZHM6IGRhdGEuY29vcmQsCiAgICAgICAgICAgICAgICAgIGRhdGV0aW1lOiBkdAogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGNvbW1pdCgnc2V0Q3VycmVudERheScsIGN1cnJlbnREYXkpOwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE3OwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMTQ6CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTQ7CiAgICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDIpOwogICAgICAgICAgICAgICAgY29tbWl0KCdzZXRDdXJyZW50RGF5JywgewogICAgICAgICAgICAgICAgICBlcnJvcjogJ0NpZGFkZSBuw6NvIGVuY29udHJhZGEnCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAxNzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUsIG51bGwsIFtbMiwgMTRdXSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIGZldGNoRm9yZWNhc3RzOiBmdW5jdGlvbiBmZXRjaEZvcmVjYXN0cyhfcmVmMywgX3JlZjQpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgICAgdmFyIGNvbW1pdCwgY29vcmRzLCBhcGlLZXksIHJlc3BvbnNlLCBkYXRhLCBmb3JlY2FzdHMsIGRhaWx5OwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjb21taXQgPSBfcmVmMy5jb21taXQ7CiAgICAgICAgICAgICAgICBjb29yZHMgPSBfcmVmNC5jb29yZHMsIGFwaUtleSA9IF9yZWY0LmFwaUtleTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMjsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiBmZXRjaCgiaHR0cHM6Ly9vcGVud2VhdGhlcm1hcC5vcmcvZGF0YS8yLjUvb25lY2FsbD9sYXQ9Ii5jb25jYXQoY29vcmRzLmxhdCwgIiZsb249IikuY29uY2F0KGNvb3Jkcy5sb24sICImYXBwaWQ9IikuY29uY2F0KGFwaUtleSkpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA4OwogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgZGF0YSA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgICAgZm9yZWNhc3RzID0gW107CiAgICAgICAgICAgICAgICBkYWlseSA9IGRhdGEuZGFpbHk7CiAgICAgICAgICAgICAgICBkYWlseS5zcGxpY2UoMSwgNCkuZm9yRWFjaChmdW5jdGlvbiAoYSkgewogICAgICAgICAgICAgICAgICB2YXIgZHQgPSBuZXcgRGF0ZShhLmR0ICogMTAwMCk7CiAgICAgICAgICAgICAgICAgIGZvcmVjYXN0cy5wdXNoKHsKICAgICAgICAgICAgICAgICAgICB0ZW1wTWluOiBNYXRoLmNlaWwoYS50ZW1wLm1pbiksCiAgICAgICAgICAgICAgICAgICAgdGVtcE1heDogTWF0aC5jZWlsKGEudGVtcC5tYXgpLAogICAgICAgICAgICAgICAgICAgIHByZXNzdXJlOiBhLnByZXNzdXJlLAogICAgICAgICAgICAgICAgICAgIHdlZWtEYXk6IGRheXNbZHQuZ2V0RGF5KCldLAogICAgICAgICAgICAgICAgICAgIHdpbmQ6IHsKICAgICAgICAgICAgICAgICAgICAgIHNwZWVkOiBhLndpbmRfc3BlZWQsCiAgICAgICAgICAgICAgICAgICAgICBkZWc6IGEud2luZF9kZWcKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHNreTogd2VhdGhlclRyYW5zbGF0ZVthLndlYXRoZXJbMF0ubWFpbl0sCiAgICAgICAgICAgICAgICAgICAgc2t5VXJsOiBnZXRVcmwoYS53ZWF0aGVyWzBdLm1haW4sIGR0LmdldEhvdXJzKCkgPiA2ICYmIGR0LmdldEhvdXJzKCkgPCAyMCkKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGNvbW1pdCgnc2V0Rm9yZWNhc3RzJywgZm9yZWNhc3RzKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMTg7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAxNToKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMTU7CiAgICAgICAgICAgICAgICBfY29udGV4dDIudDAgPSBfY29udGV4dDJbImNhdGNoIl0oMik7CiAgICAgICAgICAgICAgICBjb21taXQoJ3NldEZvcmVjYXN0cycsIHsKICAgICAgICAgICAgICAgICAgZXJyb3I6ICdOw6NvIGZvaSBwb3Nzw612ZWwgY29tcGxldGFyIGEgcGVzcXVpc2EhJwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMTg6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIsIG51bGwsIFtbMiwgMTVdXSk7CiAgICAgIH0pKSgpOwogICAgfQogIH0sCiAgZ2V0dGVyczogewogICAgY3VycmVudERheTogZnVuY3Rpb24gY3VycmVudERheShzKSB7CiAgICAgIHJldHVybiBzLmN1cnJlbnREYXk7CiAgICB9LAogICAgZm9yZWNhc3RzOiBmdW5jdGlvbiBmb3JlY2FzdHMocykgewogICAgICByZXR1cm4gcy5mb3JlY2FzdHM7CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["/home/elizabeths/weather-app/src/store/weather.js"],"names":["weatherTranslate","getCelsium","getUrl","days","state","currentDay","undefined","forecasts","mutations","setCurrentDay","day","setForecasts","clearCurrentDay","clearForecasts","actions","fetchCurrentDay","commit","city","apiKey","fetch","response","json","data","dt","Date","sky","weather","main","toLowerCase","skyUrl","getHours","temp","Math","ceil","ftemp","feels_like","pressure","wind","speed","weekDay","getDay","coords","coord","datetime","error","fetchForecasts","lat","lon","daily","splice","forEach","a","push","tempMin","min","tempMax","max","wind_speed","deg","wind_deg","getters","s"],"mappings":"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","sourcesContent":["import weatherTranslate from '@/utils/weather.util'\nimport { getCelsium, getUrl } from '@/utils/weather.util'\nconst days = [\n  'Domigo',\n  'Segunda-feira',\n  'Terça-feira',\n  'Quarta-feira',\n  'Quinta-feira',\n  'Sexta-feira',\n  'Sábado',\n]\nexport default {\n  state: {\n    currentDay: undefined,\n    forecasts: undefined,\n  },\n  mutations: {\n    setCurrentDay(state, day) {\n      state.currentDay = day\n    },\n    setForecasts(state, forecasts) {\n      state.forecasts = forecasts\n    },\n    clearCurrentDay(state) {\n      state.currentDay = void 0\n    },\n    clearForecasts(state) {\n      state.forecasts = void 0\n    },\n  },\n  actions: {\n    async fetchCurrentDay({ commit }, { city, apiKey }) {\n      try {\n        const response = await fetch(\n          `https://openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`\n        )\n\n        const data = await response.json()\n\n        const dt = new Date(data.dt * 1000)\n        const currentDay = {\n          sky: weatherTranslate[data.weather[0].main].toLowerCase(),\n          skyUrl: getUrl(\n            data.weather[0].main,\n            dt.getHours() > 6 && dt.getHours() < 20\n          ),\n          temp: Math.ceil(data.main.temp),\n          ftemp: Math.ceil(data.main.feels_like),\n          pressure: data.main.pressure,\n          wind: data.wind.speed,\n          weekDay: days[dt.getDay()],\n          coords: data.coord,\n          datetime: dt,\n        }\n        commit('setCurrentDay', currentDay)\n      } catch {\n        commit('setCurrentDay', { error: 'Cidade não encontrada' })\n      }\n    },\n    async fetchForecasts({ commit }, { coords, apiKey }) {\n      try {\n        const response = await fetch(\n          `https://openweathermap.org/data/2.5/onecall?lat=${coords.lat}&lon=${coords.lon}&appid=${apiKey}`\n        )\n        const data = await response.json()\n\n        const forecasts = []\n        const daily = data.daily\n        daily.splice(1, 4).forEach((a) => {\n          const dt = new Date(a.dt * 1000)\n          forecasts.push({\n            tempMin: Math.ceil(a.temp.min),\n            tempMax: Math.ceil(a.temp.max),\n            pressure: a.pressure,\n            weekDay: days[dt.getDay()],\n            wind: {\n              speed: a.wind_speed,\n              deg: a.wind_deg,\n            },\n            sky: weatherTranslate[a.weather[0].main],\n            skyUrl: getUrl(\n              a.weather[0].main,\n              dt.getHours() > 6 && dt.getHours() < 20\n            ),\n          })\n        })\n        commit('setForecasts', forecasts)\n      } catch {\n        commit('setForecasts', { error: 'Não foi possível completar a pesquisa!' })\n      }\n    },\n  },\n  getters: {\n    currentDay: (s) => s.currentDay,\n    forecasts: (s) => s.forecasts,\n  },\n}\n"]}]}