{"remainingRequest":"/home/elizabeths/weather-app/node_modules/babel-loader/lib/index.js!/home/elizabeths/weather-app/src/store/weather.js","dependencies":[{"path":"/home/elizabeths/weather-app/src/store/weather.js","mtime":1619111669576},{"path":"/home/elizabeths/weather-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/elizabeths/weather-app/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2guanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zcGxpY2UuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL2VsaXphYmV0aHMvd2VhdGhlci1hcHAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgd2VhdGhlclRyYW5zbGF0ZSBmcm9tICdAL3V0aWxzL3dlYXRoZXIudXRpbCc7CmltcG9ydCB7IGdldENlbHNpdW0sIGdldFVybCB9IGZyb20gJ0AvdXRpbHMvd2VhdGhlci51dGlsJzsKdmFyIGRheXMgPSBbJ0RvbWlnbycsICdTZWd1bmRhLWZlaXJhJywgJ1RlcsOnYS1mZWlyYScsICdRdWFydGEtZmVpcmEnLCAnUXVpbnRhLWZlaXJhJywgJ1NleHRhLWZlaXJhJywgJ1PDoWJhZG8nXTsKZXhwb3J0IGRlZmF1bHQgewogIHN0YXRlOiB7CiAgICBjdXJyZW50RGF5OiB1bmRlZmluZWQsCiAgICBmb3JlY2FzdHM6IHVuZGVmaW5lZAogIH0sCiAgbXV0YXRpb25zOiB7CiAgICBzZXRDdXJyZW50RGF5OiBmdW5jdGlvbiBzZXRDdXJyZW50RGF5KHN0YXRlLCBkYXkpIHsKICAgICAgc3RhdGUuY3VycmVudERheSA9IGRheTsKICAgIH0sCiAgICBzZXRGb3JlY2FzdHM6IGZ1bmN0aW9uIHNldEZvcmVjYXN0cyhzdGF0ZSwgZm9yZWNhc3RzKSB7CiAgICAgIHN0YXRlLmZvcmVjYXN0cyA9IGZvcmVjYXN0czsKICAgIH0sCiAgICBjbGVhckN1cnJlbnREYXk6IGZ1bmN0aW9uIGNsZWFyQ3VycmVudERheShzdGF0ZSkgewogICAgICBzdGF0ZS5jdXJyZW50RGF5ID0gdm9pZCAwOwogICAgfSwKICAgIGNsZWFyRm9yZWNhc3RzOiBmdW5jdGlvbiBjbGVhckZvcmVjYXN0cyhzdGF0ZSkgewogICAgICBzdGF0ZS5mb3JlY2FzdHMgPSB2b2lkIDA7CiAgICB9CiAgfSwKICBhY3Rpb25zOiB7CiAgICBmZXRjaEN1cnJlbnREYXk6IGZ1bmN0aW9uIGZldGNoQ3VycmVudERheShfcmVmLCBfcmVmMikgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgIHZhciBjb21taXQsIGNpdHksIGFwaUtleSwgcmVzcG9uc2UsIGRhdGEsIGR0LCBjdXJyZW50RGF5OwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYuY29tbWl0OwogICAgICAgICAgICAgICAgY2l0eSA9IF9yZWYyLmNpdHksIGFwaUtleSA9IF9yZWYyLmFwaUtleTsKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAyOwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU7CiAgICAgICAgICAgICAgICByZXR1cm4gZmV0Y2goImh0dHBzOi8vb3BlbndlYXRoZXJtYXAub3JnL2RhdGEvMi41L3dlYXRoZXI/cT0iLmNvbmNhdChjaXR5LCAiJmFwcGlkPSIpLmNvbmNhdChhcGlLZXkpKTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDg7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICBkYXRhID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICAgIGR0ID0gbmV3IERhdGUoZGF0YS5kdCAqIDEwMDApOwogICAgICAgICAgICAgICAgY3VycmVudERheSA9IHsKICAgICAgICAgICAgICAgICAgc2t5OiB3ZWF0aGVyVHJhbnNsYXRlW2RhdGEud2VhdGhlclswXS5tYWluXS50b0xvd2VyQ2FzZSgpLAogICAgICAgICAgICAgICAgICBza3lVcmw6IGdldFVybChkYXRhLndlYXRoZXJbMF0ubWFpbiwgZHQuZ2V0SG91cnMoKSA+IDYgJiYgZHQuZ2V0SG91cnMoKSA8IDIwKSwKICAgICAgICAgICAgICAgICAgdGVtcDogTWF0aC5jZWlsKGRhdGEubWFpbi50ZW1wKSwKICAgICAgICAgICAgICAgICAgZnRlbXA6IE1hdGguY2VpbChkYXRhLm1haW4uZmVlbHNfbGlrZSksCiAgICAgICAgICAgICAgICAgIHByZXNzdXJlOiBkYXRhLm1haW4ucHJlc3N1cmUsCiAgICAgICAgICAgICAgICAgIHdpbmQ6IGRhdGEud2luZC5zcGVlZCwKICAgICAgICAgICAgICAgICAgd2Vla0RheTogZGF5c1tkdC5nZXREYXkoKV0sCiAgICAgICAgICAgICAgICAgIGNvb3JkczogZGF0YS5jb29yZCwKICAgICAgICAgICAgICAgICAgZGF0ZXRpbWU6IGR0CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgY29tbWl0KCdzZXRDdXJyZW50RGF5JywgY3VycmVudERheSk7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTc7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAxNDoKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxNDsKICAgICAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oMik7CiAgICAgICAgICAgICAgICBjb21taXQoJ3NldEN1cnJlbnREYXknLCB7CiAgICAgICAgICAgICAgICAgIGVycm9yOiAnQ2lkYWRlIG7Do28gZW5jb250cmFkYScKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDE3OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSwgbnVsbCwgW1syLCAxNF1dKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgZmV0Y2hGb3JlY2FzdHM6IGZ1bmN0aW9uIGZldGNoRm9yZWNhc3RzKF9yZWYzLCBfcmVmNCkgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgICB2YXIgY29tbWl0LCBjb29yZHMsIGFwaUtleSwgcmVzcG9uc2UsIGRhdGEsIGZvcmVjYXN0cywgZGFpbHk7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYzLmNvbW1pdDsKICAgICAgICAgICAgICAgIGNvb3JkcyA9IF9yZWY0LmNvb3JkcywgYXBpS2V5ID0gX3JlZjQuYXBpS2V5OwogICAgICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSAyOwogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIGZldGNoKCJodHRwczovL29wZW53ZWF0aGVybWFwLm9yZy9kYXRhLzIuNS9vbmVjYWxsP2xhdD0iLmNvbmNhdChjb29yZHMubGF0LCAiJmxvbj0iKS5jb25jYXQoY29vcmRzLmxvbiwgIiZhcHBpZD0iKS5jb25jYXQoYXBpS2V5KSk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDg7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgICBkYXRhID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgICBmb3JlY2FzdHMgPSBbXTsKICAgICAgICAgICAgICAgIGRhaWx5ID0gZGF0YS5kYWlseTsKICAgICAgICAgICAgICAgIGRhaWx5LnNwbGljZSgxLCA0KS5mb3JFYWNoKGZ1bmN0aW9uIChhKSB7CiAgICAgICAgICAgICAgICAgIHZhciBkdCA9IG5ldyBEYXRlKGEuZHQgKiAxMDAwKTsKICAgICAgICAgICAgICAgICAgZm9yZWNhc3RzLnB1c2goewogICAgICAgICAgICAgICAgICAgIHRlbXBNaW46IE1hdGguY2VpbChhLnRlbXAubWluKSwKICAgICAgICAgICAgICAgICAgICB0ZW1wTWF4OiBNYXRoLmNlaWwoYS50ZW1wLm1heCksCiAgICAgICAgICAgICAgICAgICAgcHJlc3N1cmU6IGEucHJlc3N1cmUsCiAgICAgICAgICAgICAgICAgICAgd2Vla0RheTogZGF5c1tkdC5nZXREYXkoKV0sCiAgICAgICAgICAgICAgICAgICAgd2luZDogewogICAgICAgICAgICAgICAgICAgICAgc3BlZWQ6IGEud2luZF9zcGVlZCwKICAgICAgICAgICAgICAgICAgICAgIGRlZzogYS53aW5kX2RlZwogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgc2t5OiB3ZWF0aGVyVHJhbnNsYXRlW2Eud2VhdGhlclswXS5tYWluXSwKICAgICAgICAgICAgICAgICAgICBza3lVcmw6IGdldFVybChhLndlYXRoZXJbMF0ubWFpbiwgZHQuZ2V0SG91cnMoKSA+IDYgJiYgZHQuZ2V0SG91cnMoKSA8IDIwKQogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgY29tbWl0KCdzZXRGb3JlY2FzdHMnLCBmb3JlY2FzdHMpOwogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAxODsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDE1OgogICAgICAgICAgICAgICAgX2NvbnRleHQyLnByZXYgPSAxNTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi50MCA9IF9jb250ZXh0MlsiY2F0Y2giXSgyKTsKICAgICAgICAgICAgICAgIGNvbW1pdCgnc2V0Rm9yZWNhc3RzJywgewogICAgICAgICAgICAgICAgICBlcnJvcjogJ07Do28gZm9pIHBvc3PDrXZlbCBjb21wbGV0YXIgYSBwZXNxdWlzYSEnCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAxODoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMiwgbnVsbCwgW1syLCAxNV1dKTsKICAgICAgfSkpKCk7CiAgICB9CiAgfSwKICBnZXR0ZXJzOiB7CiAgICBjdXJyZW50RGF5OiBmdW5jdGlvbiBjdXJyZW50RGF5KHMpIHsKICAgICAgcmV0dXJuIHMuY3VycmVudERheTsKICAgIH0sCiAgICBmb3JlY2FzdHM6IGZ1bmN0aW9uIGZvcmVjYXN0cyhzKSB7CiAgICAgIHJldHVybiBzLmZvcmVjYXN0czsKICAgIH0KICB9Cn07"},{"version":3,"sources":["/home/elizabeths/weather-app/src/store/weather.js"],"names":["weatherTranslate","getCelsium","getUrl","days","state","currentDay","undefined","forecasts","mutations","setCurrentDay","day","setForecasts","clearCurrentDay","clearForecasts","actions","fetchCurrentDay","commit","city","apiKey","fetch","response","json","data","dt","Date","sky","weather","main","toLowerCase","skyUrl","getHours","temp","Math","ceil","ftemp","feels_like","pressure","wind","speed","weekDay","getDay","coords","coord","datetime","error","fetchForecasts","lat","lon","daily","splice","forEach","a","push","tempMin","min","tempMax","max","wind_speed","deg","wind_deg","getters","s"],"mappings":"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","sourcesContent":["import weatherTranslate from '@/utils/weather.util'\nimport { getCelsium, getUrl } from '@/utils/weather.util'\nconst days = [\n  'Domigo',\n  'Segunda-feira',\n  'Terça-feira',\n  'Quarta-feira',\n  'Quinta-feira',\n  'Sexta-feira',\n  'Sábado',\n]\nexport default {\n  state: {\n    currentDay: undefined,\n    forecasts: undefined,\n  },\n  mutations: {\n    setCurrentDay(state, day) {\n      state.currentDay = day\n    },\n    setForecasts(state, forecasts) {\n      state.forecasts = forecasts\n    },\n    clearCurrentDay(state) {\n      state.currentDay = void 0\n    },\n    clearForecasts(state) {\n      state.forecasts = void 0\n    },\n  },\n  actions: {\n    async fetchCurrentDay({ commit }, { city, apiKey }) {\n      try {\n        const response = await fetch(\n          `https://openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`\n        )\n\n        const data = await response.json()\n\n        const dt = new Date(data.dt * 1000)\n        const currentDay = {\n          sky: weatherTranslate[data.weather[0].main].toLowerCase(),\n          skyUrl: getUrl(\n            data.weather[0].main,\n            dt.getHours() > 6 && dt.getHours() < 20\n          ),\n          temp: Math.ceil(data.main.temp),\n          ftemp: Math.ceil(data.main.feels_like),\n          pressure: data.main.pressure,\n          wind: data.wind.speed,\n          weekDay: days[dt.getDay()],\n          coords: data.coord,\n          datetime: dt,\n        }\n        commit('setCurrentDay', currentDay)\n      } catch {\n        commit('setCurrentDay', { error: 'Cidade não encontrada' })\n      }\n    },\n    async fetchForecasts({ commit }, { coords, apiKey }) {\n      try {\n        const response = await fetch(\n          `https://openweathermap.org/data/2.5/onecall?lat=${coords.lat}&lon=${coords.lon}&appid=${apiKey}`\n        )\n        const data = await response.json()\n\n        const forecasts = []\n        const daily = data.daily\n        daily.splice(1, 4).forEach((a) => {\n          const dt = new Date(a.dt * 1000)\n          forecasts.push({\n            tempMin: Math.ceil(a.temp.min),\n            tempMax: Math.ceil(a.temp.max),\n            pressure: a.pressure,\n            weekDay: days[dt.getDay()],\n            wind: {\n              speed: a.wind_speed,\n              deg: a.wind_deg,\n            },\n            sky: weatherTranslate[a.weather[0].main],\n            skyUrl: getUrl(\n              a.weather[0].main,\n              dt.getHours() > 6 && dt.getHours() < 20\n            ),\n          })\n        })\n        commit('setForecasts', forecasts)\n      } catch {\n        commit('setForecasts', { error: 'Não foi possível completar a pesquisa!' })\n      }\n    },\n  },\n  getters: {\n    currentDay: (s) => s.currentDay,\n    forecasts: (s) => s.forecasts,\n  },\n}\n"]}]}